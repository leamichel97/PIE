# -*- coding: utf-8 -*-
"""
  run_screening.py generated by WhatsOpt 1.9.0
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 258

import sys
import numpy as np
import matplotlib.pyplot as plt
from packaging import version

from openmdao import __version__ as OPENMDAO_VERSION
from openmdao.api import Problem, SqliteRecorder, CaseReader
from openmdao_extensions.salib_doe_driver import SalibDOEDriver

from SALib.analyze import morris
from SALib.analyze import sobol
from SALib.plotting import morris as mp
from SALib.plotting.bar import plot as barplot
from cost_function import CostFunction 


from optparse import OptionParser
parser = OptionParser()
parser.add_option("-b", "--batch",
                  action="store_true", dest="batch", default=False,
                  help="do not plot anything")
parser.add_option("-s", "--sobol",
                  action="store_true", dest="sobol", default=False,
                  help="do not plot anything")
parser.add_option("-p", "--parallel", 
                  action="store_true", default=False,
                  help="run doe in parallel")
(options, args) = parser.parse_args()

pb = Problem(CostFunction())
sa_method_name='Morris'
sa_doe_options={'n_trajs': 10, 'n_levels': 4}
if options.sobol:
    sa_method_name='Sobol'
    sa_doe_options={'n_samples': 500, 'calc_second_order': False}

pb.driver = SalibDOEDriver(sa_method_name=sa_method_name, sa_doe_options=sa_doe_options)
pb.driver.options['run_parallel'] = options.parallel

case_recorder_filename = 'cost_function_screening.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)

if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
    pb.model.nonlinear_solver.options['err_on_non_converge'] = True
else:
    pb.model.nonlinear_solver.options['err_on_maxiter'] = True


pb.model.add_design_var('LpA', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('Ns', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('p', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('PayCap', lower=-sys.float_info.max, upper=sys.float_info.max)


pb.model.add_objective('C_TOTAL')

pb.setup()  
pb.run_driver()        


if options.batch  or options.parallel:
    exit(0)
reader = CaseReader(case_recorder_filename)
cases = reader.list_cases('driver', recurse=False)
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
data['inputs']['LpA'] = np.zeros((n,)+(1,))
data['inputs']['Ns'] = np.zeros((n,)+(1,))
data['inputs']['p'] = np.zeros((n,)+(1,))
data['inputs']['PayCap'] = np.zeros((n,)+(1,))
data['outputs']['C_TOTAL'] = np.zeros((n,)+(1,))

for i in range(len(cases)):
    case = reader.get_case(cases[i])
    data['inputs']['LpA'][i,:] = case.outputs['LpA']
    data['inputs']['Ns'][i,:] = case.outputs['Ns']
    data['inputs']['p'][i,:] = case.outputs['p']
    data['inputs']['PayCap'][i,:] = case.outputs['PayCap']
    data['outputs']['C_TOTAL'][i,:] = case.outputs['C_TOTAL']

salib_pb = pb.driver.get_salib_problem()
inputs = pb.driver.get_cases()

print('')
print('*** Output: C_TOTAL')
output = data['outputs']['C_TOTAL'].reshape((-1,))

if options.sobol:  
    Si = sobol.analyze(salib_pb, output, 
                       calc_second_order=sa_doe_options['calc_second_order'], 
                       print_to_console=True)
    Si_df = Si.to_df()
    fig, axes = plt.subplots(1, len(Si_df))
    for idx, f in enumerate(Si_df):
        axes[idx] = barplot(f, ax=axes[idx])
    fig.suptitle('C_TOTAL '+'sensitivity')

else:
    Si = morris.analyze(salib_pb, inputs, output, print_to_console=True)

    fig, (ax1, ax2) = plt.subplots(1,2)
    fig.suptitle('C_TOTAL '+'sensitivity')

    mp.horizontal_bar_plot(ax1, Si, {})
    mp.covariance_plot(ax2, Si, {})

  
plt.show()

