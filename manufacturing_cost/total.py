# -*- coding: utf-8 -*-
"""
  total.py generated by WhatsOpt 1.9.0
"""
import numpy as np
from manufacturing_cost.total_base import TotalBase

class Total(TotalBase):
    """ An OpenMDAO component to encapsulate Total discipline """
		
    def compute(self, inputs, outputs):
        """ Total computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            Cprod = inputs['Cprod']   

            CprodTotal = sum(Cprod)

            outputs['CprodTotal'] = CprodTotal
        return outputs  

# Reminder: inputs of compute()
#   
#       inputs['Cprod'] -> shape: (32,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Total, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Total """
#   
#       	partials['CprodTotal', 'Cprod'] = np.zeros((1, 32))        
