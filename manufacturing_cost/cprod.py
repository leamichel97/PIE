# -*- coding: utf-8 -*-
"""
  cprod.py generated by WhatsOpt 1.8.2
"""
import numpy as np
from manufacturing_cost.cprod_base import CprodBase

class Cprod(CprodBase):
    """ An OpenMDAO component to encapsulate Cprod discipline """
		
    def compute(self, inputs, outputs):
        """ Cprod computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
                    
            outputs['Cprod'] = np.ones((32,))   

# Reminder: inputs of compute()
#   
#       inputs['Cp'] -> shape: 1, type: Float    
#       inputs['f10'] -> shape: 1, type: Float    
#       inputs['f11'] -> shape: 1, type: Float    
#       inputs['FM1'] -> shape: (32,), type: Float    
#       inputs['Lm'] -> shape: 1, type: Float    
#       inputs['M_PA_percentage'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Cprod, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Cprod """
#   
#       	partials['Cprod', 'Cp'] = np.zeros((32, 1))
#       	partials['Cprod', 'f10'] = np.zeros((32, 1))
#       	partials['Cprod', 'f11'] = np.zeros((32, 1))
#       	partials['Cprod', 'FM1'] = np.zeros((32, 32))
#       	partials['Cprod', 'Lm'] = np.zeros((32, 1))
#       	partials['Cprod', 'M_PA_percentage'] = np.zeros((32, 1))        
