# -*- coding: utf-8 -*-
"""
  lm.py generated by WhatsOpt 1.9.0
"""
import numpy as np
from manufacturing_cost.lm_base import LmBase

class Lm(LmBase):
    """ An OpenMDAO component to encapsulate Lm discipline """
		
    def compute(self, inputs, outputs):
        """ Lm computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            n = inputs['n']     
            p = inputs['p']   

            Lm = n ** (np.log(p)/np.log(2))

            outputs['Lm'] = Lm 
        return outputs   

# Reminder: inputs of compute()
#   
#       inputs['n'] -> shape: 1, type: Float    
#       inputs['p'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Lm, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Lm """
#   
#       	partials['Lm', 'n'] = np.zeros((1, 1))
#       	partials['Lm', 'p'] = np.zeros((1, 1))        
