# -*- coding: utf-8 -*-
"""
  manufacturing_cost_base.py generated by WhatsOpt 1.9.0
"""
# DO NOT EDIT unless you know what you are doing
# whatsopt_url: 
# analysis_id: 321


import numpy as np
from numpy import nan
from packaging import version

from openmdao.api import Problem, Group, ParallelGroup, IndepVarComp
from openmdao.api import NonlinearBlockGS
from openmdao.api import ScipyKrylov
from openmdao import __version__ as OPENMDAO_VERSION

from manufacturing_cost.lm import Lm
from manufacturing_cost.cprod import Cprod
from manufacturing_cost.total import Total





class ManufacturingCostBase(Group):
    """ An OpenMDAO base component to encapsulate ManufacturingCost MDA """
    def __init__(self, thrift_client=None, **kwargs):
        super(ManufacturingCostBase, self). __init__(**kwargs)

        self.nonlinear_solver = NonlinearBlockGS()       
        self.nonlinear_solver.options['atol'] = 1.0e-10
        self.nonlinear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.nonlinear_solver.options['err_on_non_converge'] = True
            if version.parse(OPENMDAO_VERSION) > version.parse("2.9.1"):
                self.nonlinear_solver.options['reraise_child_analysiserror'] = False 
        else:
            self.nonlinear_solver.options['err_on_maxiter'] = True
        self.nonlinear_solver.options['iprint'] = 1

        self.linear_solver = ScipyKrylov()       
        self.linear_solver.options['atol'] = 1.0e-10
        self.linear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.linear_solver.options['err_on_non_converge'] = True
        else:
            self.linear_solver.options['err_on_maxiter'] = True        
        self.linear_solver.options['iprint'] = 1

    def setup(self): 

        self.add_subsystem('Lm', self.create_lm(), promotes=['Lm', 'n', 'p'])
        self.add_subsystem('Cprod', self.create_cprod(), promotes=['Cp', 'Cprod', 'f10', 'f11', 'FM1', 'Lm', 'M_PA_percentage'])
        self.add_subsystem('Total', self.create_total(), promotes=['Cprod', 'CprodTotal'])

    def create_lm(self):
    	return Lm()
    def create_cprod(self):
    	return Cprod()
    def create_total(self):
    	return Total()


# Used by Thrift server to serve disciplines
class ManufacturingCostFactoryBase(object):
    @staticmethod
    def create_manufacturing_cost_lm():
    	return Lm()
    @staticmethod
    def create_manufacturing_cost_cprod():
    	return Cprod()
    @staticmethod
    def create_manufacturing_cost_total():
    	return Total()
