# -*- coding: utf-8 -*-
"""
  aircraft_flight.py generated by WhatsOpt 1.8.2
"""
import numpy as np
from carrier_cost.aircraft_flight_base import AircraftFlightBase

class AircraftFlight(AircraftFlightBase):
    """ An OpenMDAO component to encapsulate AircraftFlight discipline """
		
    def compute(self, inputs, outputs):
        """ AircraftFlight computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            CostAircraft = inputs['CostAircraft']
            HoursAircraft = inputs['HoursAircraft']

            C_aircraft = CostAircraft / HoursAircraft
                    
            outputs['C_aircraft'] = C_aircraft  
        return outputs

# Reminder: inputs of compute()
#   
#       inputs['CostAircraft'] -> shape: 1, type: Float    
#       inputs['HoursAircraft'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(AircraftFlight, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for AircraftFlight """
#   
#       	partials['C_aircraft', 'CostAircraft'] = np.zeros((1, 1))
#       	partials['C_aircraft', 'HoursAircraft'] = np.zeros((1, 1))        
