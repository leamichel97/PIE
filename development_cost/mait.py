# -*- coding: utf-8 -*-
"""
  mait.py generated by WhatsOpt 1.9.0
"""
import numpy as np
from development_cost.mait_base import MaitBase

class Mait(MaitBase):
    """ An OpenMDAO component to encapsulate Mait discipline """
		
    def compute(self, inputs, outputs):
        """ Mait computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            FM1 = inputs['FM1']      
            HW = inputs['HW']  
            Ld = inputs['Ld']
            STH = inputs['STH']

            MAIT = FM1 * (STH + Ld * HW)

            outputs['MAIT'] = MAIT  
        return outputs  

# Reminder: inputs of compute()
#   
#       inputs['FM1'] -> shape: (32,), type: Float    
#       inputs['HW'] -> shape: (32,), type: Float    
#       inputs['Ld'] -> shape: (32,), type: Float    
#       inputs['STH'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Mait, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Mait """
#   
#       	partials['MAIT', 'FM1'] = np.zeros((32, 32))
#       	partials['MAIT', 'HW'] = np.zeros((32, 32))
#       	partials['MAIT', 'Ld'] = np.zeros((32, 32))
#       	partials['MAIT', 'STH'] = np.zeros((32, 1))        
