# -*- coding: utf-8 -*-
"""
  mpa.py generated by WhatsOpt 1.8.2
"""
import numpy as np
from development_cost.mpa_base import MpaBase

class Mpa(MpaBase):
    """ An OpenMDAO component to encapsulate Mpa discipline """
		
    def compute(self, inputs, outputs):
        """ Mpa computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
                    
            outputs['MPA'] = 1.0   

# Reminder: inputs of compute()
#   
#       inputs['MAIT'] -> shape: (32,), type: Float    
#       inputs['M_PA_percentage'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Mpa, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Mpa """
#   
#       	partials['MPA', 'MAIT'] = np.zeros((1, 32))
#       	partials['MPA', 'M_PA_percentage'] = np.zeros((1, 1))        
