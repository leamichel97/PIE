# -*- coding: utf-8 -*-
"""
  development_cost_base.py generated by WhatsOpt 1.9.0
"""
# DO NOT EDIT unless you know what you are doing
# whatsopt_url: 
# analysis_id: 459


import numpy as np
from numpy import nan
from packaging import version

from openmdao.api import Problem, Group, ParallelGroup, IndepVarComp
from openmdao.api import NonlinearBlockGS
from openmdao.api import ScipyKrylov
from openmdao import __version__ as OPENMDAO_VERSION

from development_cost.tfu import Tfu
from development_cost.fm1 import Fm1
from development_cost.mait import Mait
from development_cost.eng import Eng
from development_cost.mpa import Mpa
from development_cost.po import Po
from development_cost.f0 import F0
from development_cost.total import Total
from development_cost.sum import Sum











class DevelopmentCostBase(Group):
    """ An OpenMDAO base component to encapsulate DevelopmentCost MDA """
    def __init__(self, thrift_client=None, **kwargs):
        super(DevelopmentCostBase, self). __init__(**kwargs)

        self.nonlinear_solver = NonlinearBlockGS()       
        self.nonlinear_solver.options['atol'] = 1.0e-10
        self.nonlinear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.nonlinear_solver.options['err_on_non_converge'] = True
            if version.parse(OPENMDAO_VERSION) > version.parse("2.9.1"):
                self.nonlinear_solver.options['reraise_child_analysiserror'] = False 
        else:
            self.nonlinear_solver.options['err_on_maxiter'] = True
        self.nonlinear_solver.options['iprint'] = 1

        self.linear_solver = ScipyKrylov()       
        self.linear_solver.options['atol'] = 1.0e-10
        self.linear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.linear_solver.options['err_on_non_converge'] = True
        else:
            self.linear_solver.options['err_on_maxiter'] = True        
        self.linear_solver.options['iprint'] = 1

    def setup(self): 

        self.add_subsystem('Tfu', self.create_tfu(), promotes=['a', 'b', 'HW', 'Mass', 'TFU'])
        self.add_subsystem('Fm1', self.create_fm1(), promotes=['FM1', 'M_PA_percentage', 'TFU'])
        self.add_subsystem('Mait', self.create_mait(), promotes=['FM1', 'HW', 'Ld', 'MAIT', 'STH'])
        self.add_subsystem('Eng', self.create_eng(), promotes=['DD', 'ENG', 'FM1'])
        self.add_subsystem('Mpa', self.create_mpa(), promotes=['ENG', 'MAIT', 'MPA', 'M_PA_percentage'])
        self.add_subsystem('Po', self.create_po(), promotes=['ENG', 'MPA', 'PO'])
        self.add_subsystem('F0', self.create_f0(), promotes=['f0', 'Ns'])
        self.add_subsystem('Total', self.create_total(), promotes=['Cdev', 'Cp', 'f0', 'f1', 'f10', 'f11', 'f3', 'MAIT', 'PO'])
        self.add_subsystem('Sum', self.create_sum(), promotes=['Cdev', 'CdevSum'])

    def create_tfu(self):
    	return Tfu()
    def create_fm1(self):
    	return Fm1()
    def create_mait(self):
    	return Mait()
    def create_eng(self):
    	return Eng()
    def create_mpa(self):
    	return Mpa()
    def create_po(self):
    	return Po()
    def create_f0(self):
    	return F0()
    def create_total(self):
    	return Total()
    def create_sum(self):
    	return Sum()


# Used by Thrift server to serve disciplines
class DevelopmentCostFactoryBase(object):
    @staticmethod
    def create_development_cost_tfu():
    	return Tfu()
    @staticmethod
    def create_development_cost_fm1():
    	return Fm1()
    @staticmethod
    def create_development_cost_mait():
    	return Mait()
    @staticmethod
    def create_development_cost_eng():
    	return Eng()
    @staticmethod
    def create_development_cost_mpa():
    	return Mpa()
    @staticmethod
    def create_development_cost_po():
    	return Po()
    @staticmethod
    def create_development_cost_f0():
    	return F0()
    @staticmethod
    def create_development_cost_total():
    	return Total()
    @staticmethod
    def create_development_cost_sum():
    	return Sum()
