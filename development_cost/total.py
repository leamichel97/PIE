# -*- coding: utf-8 -*-
"""
  total.py generated by WhatsOpt 1.8.2
"""
import numpy as np
from development_cost.total_base import TotalBase

class Total(TotalBase):
    """ An OpenMDAO component to encapsulate Total discipline """
		
    def compute(self, inputs, outputs):
        """ Total computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
                    
            outputs['Cdev'] = np.ones((32,))   

# Reminder: inputs of compute()
#   
#       inputs['Cp'] -> shape: 1, type: Float    
#       inputs['f0'] -> shape: 1, type: Float    
#       inputs['f1'] -> shape: 1, type: Float    
#       inputs['f10'] -> shape: 1, type: Float    
#       inputs['f11'] -> shape: 1, type: Float    
#       inputs['f3'] -> shape: 1, type: Float    
#       inputs['FM1'] -> shape: (32,), type: Float    
#       inputs['MAIT'] -> shape: (32,), type: Float    
#       inputs['MPA'] -> shape: 1, type: Float    
#       inputs['PO'] -> shape: (32,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Total, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Total """
#   
#       	partials['Cdev', 'Cp'] = np.zeros((32, 1))
#       	partials['Cdev', 'f0'] = np.zeros((32, 1))
#       	partials['Cdev', 'f1'] = np.zeros((32, 1))
#       	partials['Cdev', 'f10'] = np.zeros((32, 1))
#       	partials['Cdev', 'f11'] = np.zeros((32, 1))
#       	partials['Cdev', 'f3'] = np.zeros((32, 1))
#       	partials['Cdev', 'FM1'] = np.zeros((32, 32))
#       	partials['Cdev', 'MAIT'] = np.zeros((32, 32))
#       	partials['Cdev', 'MPA'] = np.zeros((32, 1))
#       	partials['Cdev', 'PO'] = np.zeros((32, 32))        
