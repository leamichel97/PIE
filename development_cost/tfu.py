# -*- coding: utf-8 -*-
"""
  tfu.py generated by WhatsOpt 1.8.2
"""
import numpy as np
from development_cost.tfu_base import TfuBase

class Tfu(TfuBase):
    """ An OpenMDAO component to encapsulate Tfu discipline """
		
    def compute(self, inputs, outputs):
        """ Tfu computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
                    
            outputs['TFU'] = 1.0   

# Reminder: inputs of compute()
#   
#       inputs['a'] -> shape: (32,), type: Float    
#       inputs['b'] -> shape: (32,), type: Float    
#       inputs['Mass'] -> shape: (32,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Tfu, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Tfu """
#   
#       	partials['TFU', 'a'] = np.zeros((1, 32))
#       	partials['TFU', 'b'] = np.zeros((1, 32))
#       	partials['TFU', 'Mass'] = np.zeros((1, 32))        
