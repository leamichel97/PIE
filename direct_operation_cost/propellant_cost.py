# -*- coding: utf-8 -*-
"""
  propellant_cost.py generated by WhatsOpt 1.8.2
"""
import numpy as np
from direct_operation_cost.propellant_cost_base import PropellantCostBase

class PropellantCost(PropellantCostBase):
    """ An OpenMDAO component to encapsulate PropellantCost discipline """
		
    def compute(self, inputs, outputs):
        """ PropellantCost computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
                    
            outputs['Cprop'] = 1.0   

# Reminder: inputs of compute()
#   
#       inputs['Cf'] -> shape: 1, type: Float    
#       inputs['Cox'] -> shape: 1, type: Float    
#       inputs['Cpres'] -> shape: 1, type: Float    
#       inputs['Mp'] -> shape: 1, type: Float    
#       inputs['Mpres'] -> shape: 1, type: Float    
#       inputs['r'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(PropellantCost, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for PropellantCost """
#   
#       	partials['Cprop', 'Cf'] = np.zeros((1, 1))
#       	partials['Cprop', 'Cox'] = np.zeros((1, 1))
#       	partials['Cprop', 'Cpres'] = np.zeros((1, 1))
#       	partials['Cprop', 'Mp'] = np.zeros((1, 1))
#       	partials['Cprop', 'Mpres'] = np.zeros((1, 1))
#       	partials['Cprop', 'r'] = np.zeros((1, 1))        
